  " vimrc: vim initialization script

  " Apply vim defaults
  "
  if (&compatible)
    set nocompatible
  endif

  " Apply vim defaults even if +eval is missing
  "
  silent! while (0)
  set nocompatible
  silent! endwhile

" Always use UTF-8 encoding
"
set encoding=utf-8

" Set the leader key (i.e. <leader>)
"
let g:mapleader = ','

" Clear the rc autocmd group
"
if (has('autocmd'))
  augroup rc
    autocmd!
  augroup END
endif

" Skip the rest if this is actually VSCode
"
if (exists('g:vscode'))
  finish
endif

" Use pipes for shell commands instead of temporary files
"
if (has('job') && has('channel') && has("filterpipe"))
  set noshelltemp
else
endif

" Set cursor attributes
"
if (has('nvim') && exists('+guicursor'))
  " Make it do stuff
  set guicursor=
  set guicursor+=n-c-v:block-nCursor
  set guicursor+=i-ci-ve:ver35-iCursor
  set guicursor+=r-cr-o:hor25-nCursor
  set guicursor+=a:blinkwait1000-blinkoff300-blinkon500-Cursor/lCursor
  set guicursor+=sm:block-blinkwait250-blinkoff150-blinkon250
  set guicursor+=t:block-blinkon500-blinkoff500-TermCursor
endif


" Install Vim-Plug
"
if (empty(glob('~/.vim/autoload/plug.vim')))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  if (has('autocmd'))
    autocmd rc VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

" Load plugins
"
call plug#begin(join(split(&runtimepath, ',')[:0] + ['plug'], '/'))
"
" NOTE: use single quotes around plugin names
"
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
"Plug 'majutsushi/tagbar'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'mhinz/vim-startify'
Plug 'hashivim/vim-terraform'
Plug 'pangloss/vim-javascript'
Plug 'rust-lang/rust.vim'
Plug 'davidhalter/jedi-vim'
Plug 'connorholyday/vim-snazzy'
Plug 'github/copilot.vim'
Plug 'haishanh/night-owl.vim'
Plug 'macguirerintoul/night_owl_light.vim'
Plug 'mhinz/vim-janah'
Plug 'zeis/vim-kolor'
Plug 'EdenEast/nightfox.nvim'
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
if has('nvim')
  Plug 'neovim/nvim-lspconfig'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.8' }
  Plug 'nvim-lualine/lualine.nvim'
  Plug 'nvim-tree/nvim-web-devicons'
  Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
  Plug 'nvim-treesitter/nvim-treesitter-context'
  Plug 'nvim-treesitter/nvim-treesitter-textobjects'
  Plug 'akinsho/bufferline.nvim', { 'tag': '*' }
  Plug 'echasnovski/mini.nvim', { 'branch': 'main' }
  Plug 'echasnovski/mini.snippets'
  Plug 'folke/snacks.nvim', { 'branch': 'main' }
  Plug 'abeldekat/cmp-mini-snippets'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-cmdline'
  Plug 'hrsh7th/nvim-cmp'
  Plug 'NeogitOrg/neogit'
  Plug 'ms-jpq/chadtree', { 'branch': 'chad', 'do': 'python3 -m chadtree deps' }
  Plug 'numToStr/Comment.nvim'
  Plug 'kylechui/nvim-surround'
  Plug 'windwp/nvim-autopairs'
else
  Plug 'tpope/vim-surround'
  Plug 'jlanzarotta/bufexplorer'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
endif
"Plug 'ycm-core/YouCompleteMe'
"
let g:jedi#auto_initialization = 1
let g:jedi#completions_enabled = 0
let g:jedi#show_call_signatures = 0
"
call plug#end()

if (has('nvim'))
  lua <<EOF
local animate = require('mini.animate')
animate.setup({
  open = {
    -- Animate for 400 milliseconds with linear easing
    timing = animate.gen_timing.linear({ duration = 400, unit = 'total' }),

    -- Animate with wiping from nearest edge instead of default static one
    winconfig = animate.gen_winconfig.wipe({ direction = 'from_edge' }),

    -- Make bigger windows more transparent
    winblend = animate.gen_winblend.linear({ from = 80, to = 100 }),
  },

  close = {
    -- Animate for 400 milliseconds with linear easing
    timing = animate.gen_timing.linear({ duration = 400, unit = 'total' }),

    -- Animate with wiping to nearest edge instead of default static one
    winconfig = animate.gen_winconfig.wipe({ direction = 'to_edge' }),

    -- Make bigger windows more transparent
    winblend = animate.gen_winblend.linear({ from = 100, to = 80 }),
  },
})
require("mini.comment").setup()
require('mini.completion').setup()
require('mini.pick').setup()
require('mini.snippets').setup()
require('mini.icons').setup()
require('mini.starter').setup()
require('mini.trailspace').setup()
require('snacks').setup()
require('neogit').setup()
require('lualine').setup()
require('Comment').setup()
require("nvim-surround").setup()
require("nvim-autopairs").setup({})
EOF
  lua << EOF
require('neogit').setup({
  disable_hint = false,
  disable_context_highlighting = false,
  disable_signs = false,
  prompt_force_push = false,
  graph_style = "kitty",
  git_services = {
    ["github.com"] = "https://github.com/${owner}/${repository}/compare/${branch_name}?expand=1",
    ["bitbucket.org"] = "https://bitbucket.org/${owner}/${repository}/pull-requests/new?source=${branch_name}&t=1",
    ["gitlab.com"] = "https://gitlab.com/${owner}/${repository}/merge_requests/new?merge_request[source_branch]=${branch_name}",
  },
  telescope_sorter = function()
    return require("telescope").extensions.fzf.native_fzf_sorter()
  end,
  remember_settings = false,
  highlight = {
    italic = true,
    bold = true,
    underline = true
  },
  use_default_keymaps = true,
  auto_refresh = true,
  kind = "floating",
  floating = {
    relative = "editor",
    width = 0.8,
    height = 0.7,
    style = "minimal",
    border = "rounded",
  },
})
EOF
  lua <<EOF
local cmp = require('cmp')

cmp.setup({
  snippet = {
    expand = function(args)
      local insert = MiniSnippets.config.expand.insert or MiniSnippets.default_insert
      insert({ body = args.body }) -- Insert at cursor
      cmp.resubscribe({ "TextChangedI", "TextChangedP" })
      require("cmp.config").set_onetime({ sources = {} })
    end,
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
  }),
  window = {
    completion = cmp.config.window.bordered(),
    documentation = cmp.config.window.bordered(),
  },
  sources = cmp.config.sources({
    { name = "nvim_lsp" },
    { name = 'path' },
    { name = 'buffer' }
  })
})
cmp.setup.cmdline(
  { ':', '/', '?' }, {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = 'path' },
    { name = 'buffer' },
    {
      name = 'cmdline',
      option = { ignore_cmds = { 'Man', '!' } }
    }
  })
})
EOF
  lua <<EOF
require'nvim-web-devicons'.setup {
  color_icons = true,
  default = true,
-- Some good choices listed here:
-- U+2713 (Check Mark)
-- U+2714 (Heavy Check Mark)
-- U+2717 (Ballot X)
-- U+2718 (Heavy Ballot X)
-- U+26A1 (High Voltage Sign)
-- U+27A4 (Black Rightwards Arrowhead)
-- U+203A (Single Right-Pointing Angle Quotation Mark)
-- U+2039 (Single Left-Pointing Angle Quotation Mark)
-- U+00AB (Left-Pointing Double Angle Quotation Mark)
-- U+00BB (Right-Pointing Double Angle Quotation Mark)
-- U+2261 (Identical To)
-- U+2248 (Almost Equal To)
-- U+2260 (Not Equal To)
-- U+2264 (Less-Than or Equal To)
-- U+2265 (Greater-Than or Equal To)
-- U+00B1 (Plus-Minus Sign)
-- U+00B7 (Middle Dot)
-- U+2022 (Bullet)
-- U+2026 (Horizontal Ellipsis)
-- U+22EE (Vertical Ellipsis)
-- U+22EF (Midline Horizontal Ellipsis)
-- U+22F1 (Down Right Diagonal Ellipsis)
}
EOF
  lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    "bash", "c", "c_sharp", "clojure", "comment", "cpp", "css", "csv", "cuda",
    "diff", "dockerfile", "elixir", "elm", "erlang", "fennel", "fish", "fortran",
    "git_config", "git_rebase", "gitignore", "go", "gomod", "gosum", "gpg",
    "graphql", "groovy", "haskell", "hcl", "helm", "html", "ini", "java",
    "javascript", "jinja", "jinja_inline", "jq", "json", "julia", "kotlin",
    "latex", "lua", "make", "markdown", "markdown_inline", "nasm", "nginx",
    "objdump", "pem", "perl", "php", "printf", "python", "r", "readline",
    "regex", "rego", "ruby", "rust", "scala", "sql", "ssh_config", "terraform",
    "xresources", "powershell", "typescript", "vim", "xml", "udev", "yaml",
  },
  sync_install = false,
  auto_install = true,
  highlight = {
    enable=true,
    additional_vim_regex_highlighting = false
  },
  indent = {
    enable = true
  },
  select = {
    enable = true,
    lookahead = true,
    include_surrounding_whitespace = true
  }
}
EOF

  lua <<EOF
require'treesitter-context'.setup{
  enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
  multiwindow = true, -- Enable multiwindow support.
  max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
  min_window_height = 0, -- Minimum editor window height to enable context. Values <= 0 mean no limi t.
  line_numbers = true,
  multiline_threshold = 20, -- Maximum number of lines to show for a single context
  trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inne r', 'outer'
  mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
  -- Separator between context and content. Should be a single character string, like '-'.
  -- When separator is set, the context will only show up when there are at least 2 lines above curs orline.
  separator = nil,
  zindex = 20, -- The Z-index of the context window
  on_attach = nil, -- (fun(buf: integer): boolean) return false to disable attaching
}
vim.wo.foldmethod = 'expr'
vim.wo.foldexpr = 'v:lua.vim.treesitter.foldexpr()'
EOF
  lua <<EOF
require("bufferline").setup({
  options = {
    themable = true,
    indicator = {
      style = 'icon',
      -- icon = '|'
    },
    color_icons = true,
    -- -- Requires 'mousemovement' enabled
    -- hover = {
    --   enabled = true,
    --   delay = 200,
    --   reveal = {'close'}
    -- },
    get_element_icon = function(element)
      local icon, hl = require('nvim-web-devicons').get_icon_by_filetype(
        element.filetype, { default = false }
      )
      return icon, hl
    end,
    show_buffer_icons = true,
    show_buffer_close_icons = true,
    show_close_icon = true,
    show_tab_indicators = true,
    show_duplicate_prefix = true,
    separator_style = "slant",
    auto_toggle_bufferline = true
  }
})
EOF
endif


" Spacing
"
" Insert spaces insted of tab characters
set expandtab
"
" Number of columns reserved for line numbers
set numberwidth=2
"
" Number of spaces to use for an indent
set shiftwidth=2
"
" Number of spaces to insert for a tab
set softtabstop=2
"
" Visual width of a tab character (ASCII 0x09)
set tabstop=8
"
" Length past which lines will be broken automatically
"set textwidth=79


" Verbosity
"
" Show lines that don't fit as @@@ and nonprintable characters as hexadecimal
if (v:version >= 800)
  set display=
  set display+=truncate
  set display+=uhex
endif
"
" Display line numbers
set number
"
" Display line numbers relative to current line
"set relativenumber
"
" Display cursor coordinates (e.g. LINE,COLUMN)
set ruler
"
" Display most recent command below window
set showcmd
"
" Briefly jump to match upon completing pair in 'matchpairs'
set showmatch
"
" Do not Update terminal titles
set notitle
"
" Hide text with the "conceal" syntax attribute
set conceallevel=3
"
" Never hide status line
set laststatus=2
"
" Define terminal titles
"let &titlestring = "%t%( [%M%R]%)%( (%{expand(\"%:p:~:h\")})%)%<"


" Cursor
"
" Attempt to preserve cursor position when moving linewise
set nostartofline
"
" Allow backspacing over everything in insert mode
set backspace=
set backspace+=indent
set backspace+=eol
set backspace+=start
"
" Highlight current line number
if (exists('+cursorlineopt'))
  set cursorline
  set cursorlineopt=number
endif
"
" Lines of padding between cursor and edge of window
set scrolloff=3
"
" If 'nowrap' is set, minimum number of columnss to scroll at a time
set sidescroll=1
"
" If 'nowrap' is set, columns of padding between cursor and edge of window
set sidescrolloff=3
"
" Allow visual-block selection of empty columns
set virtualedit=block
"
" Move across lines with <Backspace>, <Space>, <Left> and <Right>
set whichwrap=
set whichwrap+=b
set whichwrap+=s
set whichwrap+=<
set whichwrap+=>
set whichwrap+=[
set whichwrap+=]


" Patterns
"
" Only highlight the current match
set nohlsearch
"
" Search forward as pattern is typed
set incsearch
"
" Ignore case by default
set ignorecase
"
" Respect case if pattern contains uppercase
set smartcase
"
" Additional bases recognized for increment/decrement
set nrformats=
set nrformats+=bin
set nrformats+=hex


" Buffers and Windows
"
" Split windows off toward the right
set splitright
"
" Split windows off toward the bottom
set splitbelow
"
" Re-read file if it was changed, unless it was deleted
set autoread
"
" Hide closed buffers rather than unloading them
set hidden
"
" Enable pseudo-transparency for floating windows
if (exists('+winblend'))
  set winblend=10
endif
"
" Enable pseudo-transparency for floating windows
if (exists('+pumblend'))
  set pumblend=10
endif
"
" Use a popup window for previews
if (exists('+previewpopup'))
  set previewpopup=
  set previewpopup+=highlight:PmenuThumb
endif


" Line Wrapping
"
" Do not wrap lines
"set nowrap
"
" Break lines before window edge
"set linebreak
"
" Indent wrapped lines
"set breakindent
"
" Break lines at these characters
"let &breakat = " \t;:"
"
" Prefix wrapped lines
"let &showbreak = "> "


" History
"
" Number of search patterns and ``:'' commands to remember (max: 10000)
set history=5000
"
" Number of modifications to remember for a given file
set undolevels=2500
"
" Always save entire buffer for undo when reloading it
set undoreload=-1
"
" Max characters typed between swapfile syncs
set updatecount=64
"
" Max milliseconds elapsed between swapfile syncs (also used by gitgutter)
set updatetime=100


" Key Timeout
"
" milliseconds to wait for completion of a mapping
set timeoutlen=750
"
" milliseconds to wait for completion of a key code
set ttimeoutlen=50
"
" Timeout on mappings
set timeout
"
" Don't timeout on keycodes
"if (has('nvim'))
"  set nottimeout
"endif


" Completion and Tags
"
" Enable insert-mode completion types
set complete=.,w,b,u,t,i
"
" Configure insert-mode completion
"
if has('nvim')
  " Use Neovim's built-in completion
  set completeopt=fuzzy,menuone,noselect,popup,preview
else
  " Use Vim's built-in completion
  set completeopt=menu,menuone,noselect,preview
endif
"
" Enable completion popup window
if has('nvim')
  set pumblend=11
elseif exists("+completepopup")
  set completeopt+=popup
  set completepopup=highlight:Pmenu,border:off
endif
"
" Enable command-mode completion
set wildmenu
"
" Ignore version control directories
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
"
" Ignore filename case
set wildignorecase
"
" Configure command-mode completion
set wildmode=
set wildmode+=longest:full
set wildmode+=full
"
" Check for tags in the following files
set tags=
set tags+=tags
set tags+=.tags
set tags+=./tags
set tags+=./.tags
"
" Use arrow keys to move the cursor rather than select completions
cnoremap <Left>  <Space><BS><Left>
cnoremap <Right> <Space><BS><Right>
"
" Set omnifunc fallback
if (has("autocmd") && exists("+omnifunc"))
  autocmd rc Filetype *
    \ if (&omnifunc == '') |
    \ silent! setlocal omnifunc=syntaxcomplete#Complete |
    \ endif
endif


" Swapfiles and Undofiles
"
" Check undofile capability and use if using swapfile
if (has('persistent_undo'))
  let &undofile = &swapfile
endif
"
" Clear swap / undo directory preferences
set directory=
set undodir=
set backupdir=
"
" Append XDG_DATA_HOME if non-null
if (!empty($XDG_DATA_HOME))
  set directory+=$XDG_DATA_HOME/vim/swap/
  set undodir+=$XDG_DATA_HOME/vim/undo/
  set backupdir+=$XDG_DATA_HOME/vim/backup/
endif
"
" Append XDG_CACHE_HOME if non-null
if (!empty($XDG_CACHE_HOME))
  set directory+=$XDG_CACHE_HOME/vim/swap/
  set undodir+=$XDG_CACHE_HOME/vim/undo/
  set backupdir+=$XDG_CACHE_HOME/vim/backup/
endif
"
" Append TMPDIR if non-null
if (!empty($TMPDIR))
  set directory+=$TMPDIR/vim/swap/
  set undodir+=$TMPDIR/vim/undo/
  set backupdir+=$TMPDIR/vim/backup/
endif
"
" Append first element of 'runtimepath'
if (!empty(split(&runtimepath, ',')))
  if (empty(&directory))
    let &directory = split(&runtimepath, ',')[0] . '/swap/'
  else
    let &directory .= ',' . split(&runtimepath, ',')[0] . '/swap/'
  endif
  if (empty(&undodir))
    let &undodir = split(&runtimepath, ',')[0] . '/undo/'
  else
    let &undodir .= ',' . split(&runtimepath, ',')[0] . '/undo/'
  endif
  if (empty(&backupdir))
    let &backupdir = split(&runtimepath, ',')[0] . '/backup/'
  else
    let &backupdir .= ',' . split(&runtimepath, ',')[0] . '/backup/'
  endif
endif
"
" Append fallback tmp directory
set directory+=/tmp/
set undodir+=/tmp/
set backupdir+=/tmp/
"
" Create the primary swap directory
if (!isdirectory(split(&directory, ',')[0]))
  silent! call mkdir(split(&directory, ',')[0], 'p', 0700)
endif
"
" Create the primary undo directory
if (!isdirectory(split(&undodir, ',')[0]))
  silent! call mkdir(split(&undodir, ',')[0], 'p', 0700)
endif
"
" Create the primary backup directory
if (!isdirectory(split(&backupdir, ',')[0]))
  silent! call mkdir(split(&backupdir, ',')[0], 'p', 0700)
endif


" Grep
"
" Use ripgrep instead
if (executable('rg') == 1)
  let &grepprg = 'rg --color=auto --smart-case --vimgrep -u -- $* -'
endif


" Terminal
"
" F**k terminal bells
set belloff=all


" Mouse
"
" Enable the mouse
if (has('mouse'))
  set mouse=a
  if (has('mouse_sgr') && !has('nvim'))
    set ttymouse=sgr
  endif
  if (exists('+mousefocus'))
    set mousefocus
  endif
endif


" ColorColumn
"
" Link colorcolumn highlighting to that of the current line number
"if has('autocmd')
"  autocmd rc ColorScheme *
"    \ silent! highlight! link ColorColumn CursorLineNr
"endif
"
" Define a function to apply 'colorcolumn' to all columns past 'textwidth'
let &colorcolumn = join(map(range(1, winwidth(0)), '"+" . v:val'), ',')
"
" Update 'colorcolumn' upon resizing a window
if (has('autocmd'))
  autocmd rc BufEnter,VimEnter,VimResized,WinEnter *
    \ silent! let &colorcolumn = join(map(range(1, winwidth(0)), '"+" . v:val'), ',')
endif


" Colors and Colorschemes
"
" Check COLORTERM
if ($COLORTERM =~? '^\s*truecolor\s*$')
  " Neovim will set this anyway
  if (!has('nvim'))
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif
"
" Check type of terminal
if (exists('+termguicolors'))
  if ($COLORTERM =~? '^\s*truecolor\s*$')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
  if ($TERM =~ '^\%(alacritty\|st\|tmux\|iterm2\?\|vte\)\%(-.*\)\?$')
    set termguicolors
    if (!has('nvim') && $TERM !~ '^.*-direct\%(-.*\)\?$')
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif
  elseif ($TERM =~ '^\%(linux\|rxvt\|screen\|interix\|putty\)\%(-.*\)\?$')
    set notermguicolors
    if (!has('nvim') && $TERM !~ '^.*-direct\%(-.*\)\?$')
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif
  elseif ($TERM =~ '^\%(xterm\)\%(-.*\)\?$')
    if $XTERM_VERSION  != '' || $VTE_VERSION != '' || $KONSOLE_PROFILE_NAME != ''
      set termguicolors
    else
      set notermguicolors
    endif
    if (!has('nvim') && $TERM !~ '^.*-direct\%(-.*\)\?$')
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif
  endif
endif
"
" For Neovim 0.1.3 and 0.1.4
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" Choose some colors
let g:colorschemes = [
      \ 'dawnfox',
      \ 'dayfox',
      \ 'duskfox',
      \ 'nightfox',
      \ 'night-owl',
      \ 'night_owl_light',
      \ 'Tomorrow',
      \ 'colorsbox-steighties',
      \ 'kolor',
      \ 'janah',
      \ 'carbonfox',
      \ 'sorbet',
      \ 'desert',
      \ 'wildcharm',
      \ 'peachpuff',
      \ 'default',
      \ ]

" Set a colorscheme
execute 'colorscheme' g:colorschemes[0]
"
" Enable the lightline theme
let g:lightline = { 'colorscheme': g:colorschemes[0] }
"
" Define a function to rotate the colorscheme
function! RotateColorscheme(n)
  if (exists('g:colorschemes'))
    try
      let l:index = max([index(g:colorschemes, g:colors_name), 0])
    catch /^Vim(let)\=:E121/
      let l:index = 0
    endtry
    let l:shift = 0
    let l:limit = len(g:colorschemes)
    while (l:shift < l:limit)
      let l:index = (l:index + a:n) % l:limit
      try
        execute 'colorscheme' g:colorschemes[l:index]
        break
      catch /^Vim(colorscheme):/
      endtry
      let l:shift += 1
    endwhile
  endif
endfunction
"
" F11:
" Rotate to next colorscheme
nnoremap <silent> <F11> :call RotateColorscheme(1)<CR>


" C / C++
"
" Highlight strings & numbers inside comments
let g:c_comment_strings = 1
"
" Highlight GNU specific items
let g:c_gnu = 1
"
" Highlight space errors
let g:c_space_errors = 1
"
" Set local options for C and C++ files
if (has('autocmd'))
  autocmd rc FileType c,cpp
    \ silent! setlocal cin noet sts=0 sw=8 ts=8 tw=79
    \|silent! let &l:shiftwidth = &tabstop
    \|silent! let &l:cinoptions = ':0,(' . &tabstop
endif


" gitcommit
"
" Set textwidth for commit messages
if (has('autocmd'))
  autocmd rc FileType gitcommit
    \ silent! setlocal tw=71
endif


" help
"
" Set local options when getting help
if (has("autocmd"))
  autocmd rc FileType help
    \ silent! setlocal cc= noswf noudf tw=0
endif
"
" Split help windows vertically
nmap <leader>K
  \ :let &keywordprg = substitute(&keywordprg, '^\s*:', ':vert ', '')<CR>K<Esc>
  \ :let &keywordprg = substitute(&keywordprg, '^:vert \s*', ':', '')<CR>


" man page
"
" Load the Man plugin
runtime ftplugin/man.vim
"
let g:man_hardwrap=0
"
" Use K to open man pages
set keywordprg=:Man
"
"Set local options for man pages
if (has('autocmd'))
  autocmd rc FileType man
    \ silent! setlocal cc= nohid noma nonu nornu noswf noudf tw=0
endif


" markdown
"
" Set local options for markdown documents (e.g. README, etc.)
if (has('autocmd'))
  if (has('linebreak'))
    autocmd rc FileType markdown
      \ silent! setlocal cc= nonu nornu wrap lbr bri
  else
    autocmd rc FileType markdown
      \ silent! setlocal cc= nonu nornu wrap
  endif
endif


" JavaScript
"
" Enable syntastic plugins
let g:syntastic_javascript_checkers=['standard']
let g:syntastic_javascript_standard_exec = 'semistandard'


" Python
"
" Set local options for python scripts
if (has('autocmd'))
  autocmd rc FileType python
    \ silent! setlocal et sts=4 sw=4 ts=8 tw=79
endif

" Enable all available highlighting
let g:python_highlight_all = 1
"
" Enable syntastic plugins
let g:syntastic_python_checkers = ['pycodestyle', 'pylint', 'python']
"
" Set the default version for pyx commands
if (has('pythonx'))
  if (has('python3'))
    set pyxversion=3
  elseif (has('python2'))
    set pyxversion=2
  endif
endif


" readline
"
" Highlight bash additions
let g:readline_has_bash = 1


" sed
"
" Highlight real tabs in sed scripts
let g:highlight_sedtabs = 1


" sh
"
" Default highlighting for shell scripts
let g:is_posix = 1
"
" Fold functions and if/do/for clauses
let g:sh_fold_enabled = 3
"
" Relax error detection
let g:sh_no_error = 1
"
" Set local options when opening a shell script
if (has("autocmd"))
  autocmd rc FileType bash,ksh,sh,zsh
    \ silent! setlocal et sts=2 sw=2 ts=8
endif
"
" Set filetype to sh when editing a shell command line
if (has("autocmd"))
  autocmd rc BufRead bash-fc.*
    \ silent! setlocal et ft=sh noswf noudf
    \|silent! let b:is_bash = 1
    \|silent! syntax enable
endif


" Airline
"
let g:airline_powerline_fonts = 1
let g:airline_left_sep = "\UE0C0"
let g:airline_right_sep = "\UE0C2"
let g:airline_left_alt_sep = "\UE0B1"
let g:airline_right_alt_sep = "\UE0B3"

if (!exists('g:airline_symbols'))
  let g:airline_symbols = {}
endif

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = "unique_tail_improved"
let g:airline#extensions#tabline#overflow_marker = '…'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamecollapse = 1

" Set an airline theme
"let g:airline_theme = 'atomic'

" Refresh airline when the colorscheme changes
if (has('autocmd'))
  autocmd rc ColorScheme *
    \ silent! AirlineRefresh
endif


" BufExplorer
"
let g:bufExplorerDefaultHelp = 0
let g:bufExplorerOnlyOneTab = 0
let g:bufExplorerShowNoName = 1
let g:bufExplorerShowTabBuffer = 1
let g:bufExplorerShowUnlisted = 1
"
" F8: Toggle the buffer explorer
nnoremap <silent> <F8> :ToggleBufExplorer<CR>


" CtrlP
"
"let g:ctrlp_map = '<C-q>'
"let g:ctrlp_cmd = 'Rz'
"let g:ctrlp_switch_buffer = 'Et'
"let g:ctrlp_show_hidden = 0
"let g:ctrlp_mruf_exclude = '^\(.*/\)\?\.\?tmp\(/.*\)\?$'


" DevIcons
"
let g:webdevicons_enable = 1
let g:webdevicons_enable_airline_tabline = 1
let g:webdevicons_enable_airline_statusline = 1
let g:webdevicons_enable_ctrlp = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enable_startify = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableNERDTreeRedraw = 1
let g:DevIconsAppendArtifactFix = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:WebDevIconsUnicodeDecorateFileNodes = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsTabAirLineAfterGlyphPadding = ' '
let g:WebDevIconsTabAirLineBeforeGlyphPadding = ' '
"
" Fix syntax matching issues (concealing brackets) when re-sourcing
if (exists('g:loaded_webdevicons'))
  call webdevicons#refresh()
endif


" GitGutter
"
" Set sign colors automatically
let g:gitgutter_set_sign_backgrounds = 1
"
" F7: Toggle GitGutter
nnoremap <silent> <F7> :GitGutterBufferToggle<CR>
"
" Bring colorscheme harmony
highlight! link SignColumn LineNr
if (has('autocmd'))
  autocmd rc ColorScheme *
    \ highlight! link SignColumn LineNr
endif

" Disable GitGutter
if (has('autocmd'))
  autocmd rc BufRead *
    \ silent! GitGutterBufferDisable
endif


" ListToggle
"
" Toggle the location list
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>q'


"" NERDTree
""
"let g:NERDTreeGitStatusIndicatorMapCustom = {
"  \   'Clean'     : '',
"  \   'Deleted'   : '',
"  \   'Dirty'     : '',
"  \   'Ignored'   : 'ﰸ',
"  \   'Modified'  : '',
"  \   'Renamed'   : '',
"  \   'Staged'    : '',
"  \   'Unknown'   : '',
"  \   'Unmerged'  : '',
"  \   'Untracked' : '',
"  \ }
""
"" Disable arrow icons at the left side of folder icons
"let g:NERDTreeDirArrowExpandable  = ""
"let g:NERDTreeDirArrowCollapsible = ""
""
"" Separate filenames from icons
"let NERDTreeNodeDelimiter="\u00a0"
""
"" Disable the "Bookmarks" label
"let g:NERDTreeMinimalUI = 1
""
"" Single click to open directories
"let g:NERDTreeMouseMode = 2
"
"" F9: Toggle the file explorer
"nnoremap <silent> <F9> :NERDTreeToggle<CR>


" Startify
"
let g:startify_fortune_use_unicode = 1
let g:startify_update_oldfiles = 1


" Syntastic
"
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_w = 1
let g:syntastic_mode_map = {
  \   "mode": "active",
  \   "active_filetypes": [],
  \   "passive_filetypes": ["python"]
  \ }


"" Tagbar
""
"" F10: Toggle the tagbar
"nnoremap <silent> <F10> :TagbarToggle<CR>


"" YouCompleteMe
""
"if (has("quickfix") && has("textprop") && exists("+completepopup"))
"  let g:ycm_add_preview_to_completeopt = 'popup'
"else
"  let g:ycm_add_preview_to_completeopt = 1
"endif
"let g:ycm_auto_hover = ''
"let g:ycm_auto_trigger = 1
"let g:ycm_autoclose_preview_window_after_completion = 0
"let g:ycm_autoclose_preview_window_after_insertion = 0
"let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_complete_in_comments = 1
"let g:ycm_confirm_extra_conf = 0
"let g:ycm_key_invoke_completion = '<C-Space>'
"let g:ycm_key_list_previous_completion = ['<S-Tab>', '<Up>']
"let g:ycm_key_list_select_completion = ['<Tab>', '<Down>']
"let g:ycm_key_list_stop_completion = ['<C-y>', '<Enter>']
"let g:ycm_max_num_candidates = 60
"let g:ycm_max_num_identifier_candidates = 12
"let g:ycm_min_num_of_chars_for_completion = 3
"let g:ycm_seed_identifiers_with_syntax = 0
"let g:ycm_global_ycm_extra_conf =
"  \ split(&runtimepath, ',')[0] . '/autoload/ycm_extra_conf.py'
"
" Toggle preview window
"nmap <silent> <leader><leader> <plug>(YCMHover)
"
"if (has('autocmd'))
"  autocmd rc FileType c,cpp
"    \ let b:ycm_hover = {
"    \   'command': 'GetDoc',
"    \   'syntax': &filetype,
"    \ }
"endif


" fzf
"
" Bring colorscheme harmony
let g:fzf_colors = {
  \ 'fg':       ['fg', 'Normal'],
  \ 'bg':       ['bg', 'Normal'],
  \ 'hl':       ['fg', 'MatchParens'],
  \ 'fg+':      ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':      ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':      ['fg', 'Statement'],
  \ 'info':     ['fg', 'PreProc'],
  \ 'border':   ['fg', 'Ignore'],
  \ 'prompt':   ['fg', 'Conditional'],
  \ 'pointer':  ['fg', 'Exception'],
  \ 'marker':   ['fg', 'Keyword'],
  \ 'spinner':  ['fg', 'Label'],
  \ 'header':   ['fg', 'Comment'],
  \ }
"
" Set fzf window layout
if (empty($TMUX) || empty($FZF_TMUX))
  let g:fzf_layout = {'window': join([
  \ 'split', 'belowright', join([float2nr(winheight(0) * 0.42),  'new'], '')
  \ ])}
else
  let g:fzf_layout = {'tmux': join([
  \ '-d', empty($FZF_TMUX_HEIGHT) ? '42%' : $FZF_TMUX_HEIGHT
  \ ])}
endif
"
let g:fzf_command_prefix = ''
let g:fzf_commands_expect = 'alt-enter,ctrl-x'
let g:fzf_buffers_jump = 1
let g:fzf_tags_command = 'ctags -f .tags -R'
"
"
" Select files
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(
  \   <q-args>,
  \   fzf#vim#with_preview(
  \     fzf#wrap({
  \       'options': [
  \         '--bind=tab:down,shift-tab:up',
  \         '--info=inline',
  \         '--layout=reverse',
  \         ]
  \       })
  \     ),
  \   <bang>0
  \ )
"
"
" Select files with ripgrep
function! Rz(query, fullscreen)
  let l:commandfmt = 'rg --no-column --no-heading --line-number --color=always --smart-case -- %s || true'
  let l:command = printf(l:commandfmt, shellescape(a:query))
  let l:command_reload = printf(l:commandfmt, '{q}')
  let l:spec = {'options': ['--phony', '--layout=reverse', '--query', a:query, '--bind', join(['change', 'reload', l:command_reload], ':')]}
  call fzf#vim#grep(l:command, 0, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
"
command! -nargs=* -bang Rz call Rz(<q-args>, <bang>0)
"
"
" Select colorschemes
function! Colors(query, fullscreen)
  let l:options = [
    \ '--cycle',
    \ '--bind=tab:down,shift-tab:up',
    \ '--info=hidden',
    \ '--layout=reverse',
    \ '--query', a:query,
    \ ]
  let l:source = map(split(globpath(&rtp, "colors/*.vim")), "fnamemodify(v:val, ':t:r')")
  if (empty($TMUX) || empty($FZF_TMUX))
    let l:spec = {
    \ 'options': l:options, 'source': l:source, 'sink': 'color',
    \ 'window': join([
    \   'vertical', 'aboveleft', join([float2nr(winwidth(0) * 0.28), 'new'], '')
    \ ])
    \ }
  else
    let l:spec = {
    \ 'options': l:options, 'source': l:source, 'sink': 'color',
    \ 'tmux': join(['-d', empty($FZF_TMUX_HEIGHT) ? '42%' : $FZF_TMUX_HEIGHT])
    \ }
  endif
  call fzf#run(fzf#wrap(l:spec, a:fullscreen))
endfunction
"
command! -nargs=* -bang Colors call Colors(<q-args>, <bang>0)
"
"
" F1:
" Find buffers
nnoremap <silent> <F1> :Buffers<CR>
inoremap <silent> <F1> <Esc>:Buffers<CR>
nnoremap <silent> <Esc><F1> :Buffers!<CR>
inoremap <silent> <Esc><F1> <Esc>:Buffers!<CR>

" F2:
" Find helptags
nnoremap <silent> <F2> :Helptags<CR>
inoremap <silent> <F2> <Esc>:Helptags<CR>
nnoremap <silent> <Esc><F2> :Helptags!<CR>
inoremap <silent> <Esc><F2> <Esc>:Helptags!<CR>

" F3:
" Find commands
nnoremap <silent> <F3> :Commands<CR>
inoremap <silent> <F3> <Esc>:Commands<CR>
nnoremap <silent> <Esc><F3> :Commands!<CR>
inoremap <silent> <Esc><F3> <Esc>:Commands!<CR>

" F4:
" Find files
nnoremap <silent> <F4> :Files<CR>
inoremap <silent> <F4> <Esc>:Files<CR>
nnoremap <silent> <Esc><F4> :Files!<CR>
inoremap <silent> <Esc><F4> <Esc>:Files!<CR>


" Tabs
"
" Create a tab
nnoremap <silent> <leader>c :tabnew<CR>
"
" Destroy a tab
nnoremap <silent> <leader>x :tabclose<CR>
"
" Go to the next tab
nnoremap <silent> <C-PageUp> :tabnext<CR>
"
" Go to the previous tab
nnoremap <silent> <C-PageDown> :tabprev<CR>


" Paste mode
"
"set pastetoggle=<Insert>
"
" Insert:
" Toggle paste mode
nnoremap <silent> <Insert>
  \ : set paste!<CR>


" Misc
"
" F5: Toggle search highlighting
nnoremap <silent> <F5>
  \ : setlocal hlsearch!<CR>
"
" F6: Toggle line numbers
"nnoremap <silent> <F6>
"  \ : let &l:nu = !&l:nu<Bar>
"  \   let &l:rnu = &l:nu<CR>
nnoremap <silent> <F6>
  \ : let &l:nu = !&l:nu<CR>
"
" Insert a shebang above the first line
"nnoremap <silent> <leader>#!
"  \ ggI<C-R>=substitute(&ft, "..*", "#!" . exepath(&ft) . "\\r", "")<CR><Esc>``
"
" Copy the current visual selection to the clipboard
vnoremap <silent> - "+y
nnoremap <silent> - "+y
"
" Paste the contents of the clipboard
vnoremap <silent> + "+p
nnoremap <silent> + "+p
"
" Search forward for the current visual selection
" Note: Jumping to a tag does not set the current search pattern
vnoremap <silent> *
  \ : <C-U>let old_reg=getreg('"')<Bar>
  \   let old_regtype=getregtype('"')<CR>
  \   gvy/<C-R><C-R>=substitute(
  \   escape(@",'/\.*$^~['),'\_s\+','\\_s\\+','g')<CR><CR>
  \   gV:call setreg('"',old_reg,old_regtype)<CR>
"
" Search backward for the current visual selection
" Note: Jumping to a tag does not set the current search pattern
vnoremap <silent> #
  \ : <C-U>let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \   gvy?<C-R><C-R>=substitute(
  \   escape(@",'?\.*$^~['),'\_s\+','\\_s\\+','g')<CR><CR>
  \   gV:call setreg('"',old_reg,old_regtype)<CR>


" Epilogue
"
" Allow options to be set from a modeline
set modeline
"
" Restrict editor if SWIM owns this file
set secure


" vi:et:ft=vim:sts=2:sw=2:ts=8:tw=119
